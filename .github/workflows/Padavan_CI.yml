#修改 targets: 中的 "R2100" 为你需要编译的型号，注意名称要与configs/templates/目录下的名字相同
# by: womade

name: Padavan_CI

on: 
#  release:
#    types: [published]
#  push:                                                        # 推送操作
#    tags:
#      - 'v*'
#    branches:                                                  # 分支
#      - main                                                   # 主分支
  workflow_dispatch:
#  schedule:                                                    # 自动编译时间表
#    - cron: 0 20 * * *                                         # 每天国际时间20:00，北京时间凌晨04:00执行
  watch:                                                        # 监视操作
    types: [started]                                            # 点击 Star 之后
env:
  build_dir: /opt/rt-n56u                                       # 源码目录
  images_dir: /opt/images                                       # 固件目录
  work_dir: /opt/rt-n56u/trunk                                  # 工作目录
  custom_modify: true                                           # 修改文件
  upload_cowtransfer: true                                      # 上传到奶牛快传
  upload_wetransfer: true                                       # 上传到 WeTransfer
  src_git: https://github.com/hanwckf/rt-n56u.git               # 源码地址
  config_dir: /opt/rt-n56u/trunk/configs/templates              # 设备模板目录
  toolchain_dir: /opt/rt-n56u/toolchain-mipsel/toolchain-3.4.x  # 工具链目录
  toolchain_pkg: mipsel-linux-uclibc.tar.xz
  toolchain_url: https://raw.githubusercontent.com/womade/Padavan_actions/main/public
#   ENABLED_CFG: |
#     CONFIG_FIRMWARE_INCLUDE_LANG_CN
#     CONFIG_FIRMWARE_ENABLE_IPV6
#   DISABLED_CFG: |
#     CONFIG_FIRMWARE_INCLUDE_LANG_UK
#     CONFIG_FIRMWARE_INCLUDE_TCPDUMP
#     CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT
#     CONFIG_FIRMWARE_INCLUDE_GDUT_DRCOM
#     CONFIG_FIRMWARE_INCLUDE_DOGCOM
#     CONFIG_FIRMWARE_INCLUDE_MINIEAP
#     CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT
#     CONFIG_FIRMWARE_INCLUDE_NAPT66
#     CONFIG_FIRMWARE_INCLUDE_VLMCSD
#     CONFIG_FIRMWARE_INCLUDE_TTYD
#     CONFIG_FIRMWARE_INCLUDE_HTOP
#     CONFIG_FIRMWARE_INCLUDE_NANO
#     CONFIG_FIRMWARE_INCLUDE_MENTOHUST
#     CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS
#     CONFIG_FIRMWARE_INCLUDE_SSSERVER
#     CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_SERVER
#     CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CLIENT
#     CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CMD
#     CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER
#     CONFIG_FIRMWARE_INCLUDE_FRPC
#     CONFIG_FIRMWARE_INCLUDE_FRPS
#     CONFIG_FIRMWARE_INCLUDE_TUNSAFE

  ENABLED_CFG: |
        CONFIG_FIRMWARE_INCLUDE_MENTOHUST #MENTOHUST
        CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT #SCUTCLIENT
        CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS #SS plus+
        CONFIG_FIRMWARE_INCLUDE_SSSERVER #SS server
        CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER #DNSFORWARDER
        CONFIG_FIRMWARE_INCLUDE_ADBYBY #adbyby plus+
        CONFIG_FIRMWARE_INCLUDE_FRPC #内网穿透FRPC
        CONFIG_FIRMWARE_INCLUDE_FRPS #内网穿透FRPS
        CONFIG_FIRMWARE_INCLUDE_TUNSAFE #TUNSAFE
        CONFIG_FIRMWARE_INCLUDE_ALIDDNS #阿里DDNS
        CONFIG_FIRMWARE_INCLUDE_SMARTDNS #smartdns
        CONFIG_FIRMWARE_INCLUDE_SMARTDNSBIN #smartdns二进制文件
        CONFIG_FIRMWARE_INCLUDE_V2RAY #v2ray二进制文件
        CONFIG_FIRMWARE_INCLUDE_TROJAN #集成trojan执行文件，如果不集成，会从网上下载下来执行，不影响正常使用
        CONFIG_FIRMWARE_INCLUDE_KOOLPROXY #KP广告过滤
        CONFIG_FIRMWARE_INCLUDE_CADDY #在线文件管理服务
        CONFIG_FIRMWARE_INCLUDE_CADDYBIN #集成caddu执行文件，此文件有13M,请注意固件大小。如果不集成，会从网上下载下来执行，不影响正常使用
        CONFIG_FIRMWARE_INCLUDE_KUMASOCKS
        CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: build
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id  # 自己点的 Star
    env:
      build_variant: ${{ matrix.build_variant }}
      targets: ${{ matrix.targets }}
    strategy:
      matrix:
        include:
          - build_variant: "mt7620"
            targets: "MI-MINI"
          - build_variant: "mt7621"
            targets: "R2100 RM2100 MI-R3G"
    steps:
      - name: Checkout main            # 导入主分支
        uses: actions/checkout@v2
      - name: Prepare environment      # 准备编译环境
        run: |                         # 安装依赖包
          sudo apt update
          sudo apt install libtool-bin gperf python-docutils autopoint gettext
          sudo timedatectl set-timezone 'Asia/Shanghai'  # 设置时区
      - name: Clone source code
        run: |                         # 克隆源码
          git clone --depth=1 $src_git $build_dir
      - name: Prepare toolchain
        run: |                         # 下载预编译的构建工具链
          # cd $build_dir/toolchain-mipsel
          # sh dl_toolchain.sh
          mkdir -p $toolchain_dir && mkdir -p $images_dir
          curl -LO ${toolchain_url}/${toolchain_pkg}
          tar -xf $toolchain_pkg -C $toolchain_dir
      - name: Modify configs
        run: |                         # 修改配置文件
          cd $config_dir
          for m in $targets; do if [ -f $m.config ]; then \
          for n in $ENABLED_CFG; do sed -i "/${n}/c${n}=y" $m.config; done; \
          for n in $DISABLED_CFG; do sed -i "/${n}/c${n}=n" $m.config; done; \
          fi; done
      - name: Copy custom modify
        if: env.custom_modify == 'true'
        run: |                         # 拷贝文件并修改
          for m in $targets; do if [ ! -f public/$m.sh ]; then echo "public/$m.sh 未找到"
          else
            if [ -f public/$m.sh ]; then cp -f public/$m.sh $work_dir; echo "$m.sh 拷贝成功"; fi; fi; done; \
          for m in $targets; do  if [ ! -f public/$m.config ]; then echo "public/$m.config 未找到"
          else
            if [ -f public/$m.config ]; then cp -f public/$m.config $config_dir/$m.config; echo "$m.config 已修改"; fi; fi; done; \
          if [ -f public/public.sh ]; then cp -f public/public.sh $work_dir; fi
          if [ -d padavan/config ]; then cp -f padavan/config/* $work_dir; fi
          if [ -d padavan/scripts ]; then cp -f padavan/scripts/* $work_dir; fi
          if [ -d padavan/modify ]; then cp -rf padavan/modify/* $work_dir; fi
          cd $work_dir
          for m in $targets; do if [ -f $m.config ]; then echo "拷贝 $m.config"; cp -f ./$m.config $config_dir/$m.config; fi; done; \
          for m in $targets; do if [ -f public.sh ]; then echo "执行 public.sh"; sh ./public.sh; fi; if [ -f $m.sh ]; then echo "执行 $m.sh"; sh ./$m.sh; fi; done; \
      - name: Start build firmware
        run: |                         # 执行构建固件
          cd $work_dir
          for m in $targets; do fakeroot ./build_firmware_ci $m; \
          if [ $? = 0 ]; then cp -f images/*.trx $images_dir/padavan_${m}_$(date +%Y%m%d).trx; else exit 1; fi; \
          ./clear_tree_simple >/dev/null 2>&1; done
      - name: Upload images to Artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2.2.1
        with:
          name: padavan_${{ env.build_variant }}
          path: ${{ env.images_dir }}
      - name: Upload images to CowTransfer
        if: env.upload_cowtransfer == 'true' && success()
        run: |                         # 上传到奶牛快传
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${images_dir} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
      - name: Upload images to WeTransfer
        if: env.upload_wetransfer == 'true' && success()
        run: |                         # 上传到 WeTransfer
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${images_dir} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
